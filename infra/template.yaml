AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: qPCR Analysis Platform - Optimized with separate Lambda functions

Parameters:
  Environment:
    Type: String
    Default: prod

Globals:
  Function:
    Runtime: python3.11
    Timeout: 300
    MemorySize: 1024
    Environment:
      Variables:
        RAW_BUCKET_NAME: !Ref RawBucket
        REPORT_BUCKET_NAME: !Ref ReportBucket
        JOB_TABLE_NAME: !Ref JobTable
        REGION: !Ref AWS::Region

Resources:
  # S3 Buckets
  RawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-raw-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3600

  ReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-reports-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # DynamoDB Table
  JobTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-jobs
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # SQS Queues
  AnalysisDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-analysis-dlq
  
  AnalysisQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-analysis-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AnalysisDeadLetterQueue.Arn
        maxReceiveCount: 3

  # Step Functions State Machine - Optimized
  AnalysisStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-analysis-workflow
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "qPCR Analysis Pipeline - Optimized",
          "StartAt": "ParseFile",
          "States": {
            "ParseFile": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ParseFileFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "file_key.$": "$.file_key"
                }
              },
              "ResultPath": "$.parse_result",
              "OutputPath": "$",
              "Next": "QualityControl",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "QualityControl": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${QualityControlFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "parsed_data.$": "$.parse_result.Payload",
                  "analysis_params.$": "$.analysis_params"
                }
              },
              "ResultPath": "$.qc_result",
              "OutputPath": "$",
              "Next": "NormalizeData",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "NormalizeData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${NormalizeDataFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "qc_data.$": "$.qc_result.Payload",
                  "reference_gene.$": "$.reference_gene",
                  "control_condition.$": "$.control_condition"
                }
              },
              "ResultPath": "$.normalize_result",
              "OutputPath": "$",
              "Next": "CalculateFoldChange",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "CalculateFoldChange": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${FoldChangeFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "normalized_data.$": "$.normalize_result.Payload"
                }
              },
              "ResultPath": "$.fold_change_result",
              "OutputPath": "$",
              "Next": "StatisticalAnalysis",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "StatisticalAnalysis": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${StatsWorkerFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "analysis_data.$": "$.fold_change_result.Payload",
                  "analysis_params.$": "$.analysis_params"
                }
              },
              "ResultPath": "$.stats_result",
              "OutputPath": "$",
              "Next": "GeneratePlots",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "GeneratePlots": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PlotWorkerFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "analysis_results.$": "$",
                  "generate_plots.$": "$.analysis_params.generate_plots"
                }
              },
              "ResultPath": "$.plot_result",
              "OutputPath": "$",
              "Next": "BuildReport",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "BuildReport": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ReportBuilderFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "experiment_name.$": "$.experiment_name",
                  "all_results.$": "$"
                }
              },
              "ResultPath": "$.report_result",
              "OutputPath": "$",
              "Next": "Complete",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ]
            },
            "Complete": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${NotifyCompleteFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "report_result.$": "$.report_result.Payload",
                  "email.$": "$.email",
                  "email_notification.$": "$.email_notification"
                }
              },
              "End": true
            },
            "HandleError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ErrorHandlerFunction}",
                "Payload": {
                  "job_id.$": "$.job_id",
                  "error.$": "$.error"
                }
              },
              "End": true
            }
          }
        }

  # IAM Role for Step Functions
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ParseFileFunction.Arn
                  - !GetAtt QualityControlFunction.Arn
                  - !GetAtt NormalizeDataFunction.Arn
                  - !GetAtt FoldChangeFunction.Arn
                  - !GetAtt StatsWorkerFunction.Arn
                  - !GetAtt PlotWorkerFunction.Arn
                  - !GetAtt ReportBuilderFunction.Arn
                  - !GetAtt NotifyCompleteFunction.Arn
                  - !GetAtt ErrorHandlerFunction.Arn

  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  # Analysis Pipeline Lambda Functions
  ParseFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-parse-file
      CodeUri: ../lambdas/parse_file/
      Handler: handler.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawBucket
        - S3WritePolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  QualityControlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-quality-control
      CodeUri: ../lambdas/quality_control/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  NormalizeDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-normalize-data
      CodeUri: ../lambdas/normalize_data/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  FoldChangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-fold-change
      CodeUri: ../lambdas/fold_change/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  StatsWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stats-worker
      CodeUri: ../lambdas/stats_worker/
      Handler: handler.lambda_handler
      MemorySize: 2048
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  PlotWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-plot-worker
      CodeUri: ../lambdas/plot_worker/
      Handler: handler.lambda_handler
      MemorySize: 2048
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  ReportBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-report-builder
      CodeUri: ../lambdas/report_builder/
      Handler: handler.lambda_handler
      MemorySize: 2048
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  NotifyCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-notify-complete
      CodeUri: ../lambdas/notify_complete/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          SES_FROM_EMAIL: !Sub noreply@${AWS::StackName}.com
      Policies:
        - SESCrudPolicy:
            IdentityName: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  ErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-error-handler
      CodeUri: ../lambdas/error_handler/
      Handler: handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable

  # Existing Lambda Functions (API endpoints)
  UploadPresignFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-upload-presign
      CodeUri: ../lambdas/upload_presign/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - S3WritePolicy:
            BucketName: !Ref RawBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /files/presign
            Method: POST

  IngestQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ingest-queue
      CodeUri: ../lambdas/ingest_queue/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AnalysisQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3ReadPolicy:
            BucketName: !Ref RawBucket

  SubmitJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-submit-job
      CodeUri: ../lambdas/submit_job/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
          STACK_NAME: !Ref AWS::StackName
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AnalysisQueue.QueueName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /jobs/submit
            Method: POST

  GetJobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-job-status
      CodeUri: ../lambdas/get_job_status/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTable
        - S3ReadPolicy:
            BucketName: !Ref ReportBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /jobs/{job_id}
            Method: GET

  DownloadResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-download-results
      CodeUri: ../lambdas/download_results/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTable
        - S3ReadPolicy:
            BucketName: !Ref ReportBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /jobs/{job_id}/download
            Method: GET

  # Updated Analysis Runner for Step Functions trigger
  AnalysisRunnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-analysis-runner
      CodeUri: ../lambdas/analysis_runner/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          STATE_MACHINE_ARN: !Ref AnalysisStateMachine
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RawBucket
        - S3CrudPolicy:
            BucketName: !Ref ReportBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - SQSPollerPolicy:
            QueueName: !GetAtt AnalysisQueue.QueueName
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt AnalysisStateMachine.Name
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AnalysisQueue.Arn
            BatchSize: 1

  # Lambda Permissions for S3
  IngestQueueS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IngestQueueFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub ${RawBucket.Arn}

  # Custom Resource to set up S3 notification
  S3NotificationSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-s3-notification-setup
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 30
      InlineCode: |
        import json
        import boto3
        import cfnresponse
        
        def lambda_handler(event, context):
            try:
                s3 = boto3.client('s3')
                
                if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                    bucket_name = event['ResourceProperties']['BucketName']
                    lambda_arn = event['ResourceProperties']['LambdaArn']
                    
                    notification_config = {
                        'LambdaFunctionConfigurations': [
                            {
                                'Id': 'IngestQueueNotification',
                                'LambdaFunctionArn': lambda_arn,
                                'Events': ['s3:ObjectCreated:*'],
                                'Filter': {
                                    'Key': {
                                        'FilterRules': [
                                            {
                                                'Name': 'prefix',
                                                'Value': 'raw/'
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                    
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration=notification_config
                    )
                
                elif event['RequestType'] == 'Delete':
                    bucket_name = event['ResourceProperties']['BucketName']
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration={}
                    )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetBucketNotification
                - s3:PutBucketNotification
              Resource: !Sub ${RawBucket.Arn}

  S3NotificationCustomResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: IngestQueueS3Permission
    Properties:
      ServiceToken: !GetAtt S3NotificationSetupFunction.Arn
      BucketName: !Ref RawBucket
      LambdaArn: !GetAtt IngestQueueFunction.Arn

  # API Gateway
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod

  RawBucketName:
    Description: S3 bucket for raw uploads
    Value: !Ref RawBucket

  ReportBucketName:
    Description: S3 bucket for reports
    Value: !Ref ReportBucket

  JobTableName:
    Description: DynamoDB table for jobs
    Value: !Ref JobTable

  AnalysisQueueUrl:
    Description: SQS queue for analysis jobs
    Value: !Ref AnalysisQueue

  CognitoPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  CognitoClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  StateMachineArn:
    Description: Step Functions State Machine ARN
    Value: !Ref AnalysisStateMachine